flowchart TD
  %% PART 1: Configuration Parsing (Your Work)
  subgraph PART1 ["Part 1: Configuration Parsing (Your Work)"]
    A1["Config File: l3robi.conf"]
    A2["1.1: Read & Validate File<br/>FileReader::readFile<br/>System Call: access()"]
    A3["1.2: Clean Content<br/>ConfigParser::cleanContent()<br/>Removes comments and standardizes whitespace"]
    A4["1.3: Parse Blocks & Directives<br/>ConfigParser::parse()<br/>Finds 'server' and 'location' blocks"]
    A5["1.4: Validate Directives<br/>Helpers: validateAndParsePort(), parseSizeToBytes()<br/>Valid port (1-65535), K/M, overflow checks"]
    A6{{"Final Config Object<br/>cgi_pass paths<br/>auth_required flags"}}
    A1 --> A2 --> A3 --> A4 --> A5 --> A6
  end

  A6 --> B1["Server Core Logic<br/>(Handles Sockets, epoll, Request Routing)"]

  %% PART 2: CGI Handling (Your Work)
  subgraph PART2 ["Part 2: CGI Handling (Your Work)"]
    B1 -- "Request for CGI Script" --> C1["2.1: CgiExecutor Setup<br/>CgiExecutor Constructor<br/>System Call: pipe()"]
    C1 --> C2["2.2: Prepare Environment<br/>_setupEnvironment()<br/>Builds char** for execve (method, query, headers)"]
    C2 --> C3["2.3: Create Child Process<br/>System Call: fork()"]

    C3 -- "Child Process" --> C4["2.4: Redirect I/O & Execute<br/>System Calls: dup2(), execve()<br/>Child's stdin/stdout to pipes.<br/>Becomes CGI interpreter"]
    C3 -- "Parent Process" --> C5["2.5: Manage Child I/O<br/>onEvent() state (CGI_WRITING, CGI_READING, CGI_DONE)<br/>pipes->epoll, write POST body, read response"]

    subgraph TIMEOUTWATCH["CGI Timeout Watchdog (Parallel Process)"]
      C5 --> C6["checkCgiTimeouts()<br/>Check duration since creation.<br/>System Call: kill(pid, SIGKILL) if timeout.<br/>Action: Prepares 504 Gateway Timeout response."]
    end
    C5 --> D1["Final CGI Response String"]
  end

  %% PART 3: Bonus - Cookies & Sessions (Your Work)
  subgraph PART3 ["Part 3: Bonus - Cookies & Sessions (Your Work)"]
    D1 -- "CGI Response has 'X-Session-Action' Header" --> E1{{"Check Header Value"}}
    E1 -- "CREATE" --> E2["3.1: Session Creation<br/>ServerManager::createSession()<br/>Generates unique ID, adds to std::map & 'sessions.db'"]
    E2 --> E4["Add 'Set-Cookie' Header<br/>HttpResponse adds new session ID to response."]
    E1 -- "DELETE" --> E3["3.2: Session Deletion<br/>ServerManager::deleteSession()<br/>Removes session from map and 'sessions.db'"]
    E3 --> E5["Add Expired 'Set-Cookie' Header<br/>HttpResponse tells browser to delete the cookie."]
    B1 -- "Request to 'auth_required on' location" --> F1["3.3: Session Validation<br/>Headers::cookieParser()<br/>ServerManager::validateSession()"]
    F1 --> F2{{"Is Session ID in 'sessions.db' & not expired?"}}
    F2 -- "Yes" --> B1
    F2 -- "No" --> F3["Deny Access (403 Forbidden)"]
  end

  E4 --> F6["Send Response to Client"]
  E5 --> F6
  F3 --> F6